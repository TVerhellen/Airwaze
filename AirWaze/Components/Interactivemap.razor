@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.JSInterop
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

@inject ILogger<Interactivemap> Logger
@inject IJSRuntime jsRuntime


@if (currentPosition != null)
{

    <h1>@currentHeading</h1>
    <p>
        <label>
            New title
            <input @bind="@currentPosition.Coords.Latitude" />
        </label>
        <button @onclick="UpdateHeading">
            Update heading
        </button>
    </p>
}



 <button class="btn btn-primary" @onclick="StartTimer">Get Current Position</button>

@if(currentPosition != null){
   <div>
<p>Current position : </p>
        <ul>
           
             <li>Latitude : @currentPosition.Coords.Latitude</li>
            <li>Longitude : @currentPosition.Coords.Longitude </li>            
            <li>Accuracy : @currentPosition.Coords.Accuracy </li>            
            <li>Heading : @currentPosition.Coords.Heading </li>
            <li>Speed : @currentPosition.Coords.Speed </li>
        </ul>
        <button @onclick="GetDistanceVsStation">Afstand VS Station SintNiklaas </button>
        <button @onclick="GetDistanceVsGang">Afstand VS Station SintNiklaas</button>
        <button @onclick="GetDistanceVsWH">Afstand VS Witte Huis</button>
    </div>
    @if (distancestation != null)
    {
        <h1>Afstand vs StationSintNiklaas : @distancestation km</h1>       
    }
    @if (distancegang != null)
    {
        <h1>Afstand vs de Gang in dit gebouw verderop:  @distancegang km</h1>       
    }
    @if (distancewhitehouse != null)
    {
        <h1>Afstand vs Witte Huis : @distancewhitehouse km</h1>       
    }
}

@code {


    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    private double stationlon = 4.144092;
    private double stationlat = 51.171666;
    private double ganglon = 4.140948;
    private double ganglat = 51.170052;
    private double whitehouselon = -77.036533;
    private double whitehouselat = 38.897668;
    private double distancestation;
    private double distancegang;
    private double distancewhitehouse;
    


    private List<GeolocationResult> positioHistory = new List<GeolocationResult>();
    private double distance;


    public static double Radians(double x)
    {
        double PIx = 3.141592653589793;
        return x * PIx / 180;
    }
    public static double DistanceBetweenPlaces(double lon1, double lat1, double lon2, double lat2)
    {
        double RADIUS = 6378.16;

        double dlon = Radians(lon2 - lon1);
        double dlat = Radians(lat2 - lat1);

        double a = (Math.Sin(dlat / 2) * Math.Sin(dlat / 2)) + Math.Cos(Radians(lat1)) * Math.Cos(Radians(lat2)) * (Math.Sin(dlon / 2) * Math.Sin(dlon / 2));
        double angle = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return angle * RADIUS;
    }

    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
    }
    public async Task GetGeolocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)

        })).Location;
        StartTimer();
    }

    private string currentHeading = "Initial heading";
    private string? newHeading;

    private async Task UpdateHeading()
    {
        await Task.Delay(2000);

        currentHeading = $"{@currentPosition.Coords.Latitude} , {@currentPosition.Coords.Longitude}!!!";
    }

    private static System.Timers.Timer thisTimer;
    private int counter = 0;

    

    public void StartTimer()
    {
       GetGeolocation();   
        thisTimer = new System.Timers.Timer(1000);
        thisTimer.Elapsed += CountDownTimer;
        thisTimer.Enabled = true;
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter % 5 == 0 || counter < 5)
        {
            counter += 1;
            GetGeolocation();          
        }
        else
        {
            GetDistanceVsStation();
            GetDistanceVsGang();
            GetDistanceVsWH();
            UpdateHeading();
        }
        InvokeAsync(StateHasChanged);
    }

    public void GetDistanceVsStation()
    {
       distancestation = DistanceBetweenPlaces(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, stationlon, stationlat);
    }
    public void GetDistanceVsGang()
    {
       distancegang = DistanceBetweenPlaces(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, ganglon, ganglat);
    }
    public void GetDistanceVsWH()
    {
       distancewhitehouse = DistanceBetweenPlaces(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, whitehouselon, whitehouselat);
    }


 }
