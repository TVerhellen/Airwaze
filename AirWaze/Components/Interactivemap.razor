@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.JSInterop
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

@inject ILogger<Interactivemap> Logger
@inject IJSRuntime jsRuntime


@if (currentPosition != null)
{
    <p>Latitude : @currentPosition.Coords.Latitude Longitude : @currentPosition.Coords.Longitude</p>
}



 <button class="btn btn-primary" @onclick="StartTimer" style="margin-right:20px;">Get Current Position -- Starts Events + Timer -- Only Once!</button>
 
@if (currentPosition != null){
    <div>
<p>Current position : </p>
        <ul>
           
             <li>Latitude : @currentPosition.Coords.Latitude</li>
            <li>Longitude : @currentPosition.Coords.Longitude </li>            
            <li>Accuracy : @currentPosition.Coords.Accuracy </li>            
            <li>Heading : @currentPosition.Coords.Heading </li>
            <li>Speed : @currentPosition.Coords.Speed </li>
        </ul>
        
    </div>
    <br />
    <h1>Overview Past Postions:</h1>  

        <table>
            <thead>
                <tr>
                    <th>Lattitiude</th>
                    <th>Longitude</th>
                    <th>Accuracy</th>
                    <th>Speed</th>                    
                    <th>Heading</th>                    
                    <th>dist vs Station</th>
                    <th>dist vs Gang</th>
                    <th>Dist vs White House (Wash, USA)</th>
                    
                </tr>
            </thead>
            <tbody>            
                @foreach (var x in positioHistory)
                {
                    <tr>
                        <td>@x.Coords.Latitude</td>
                        <td>@x.Coords.Longitude</td>                       
                        <td>@x.Coords.Accuracy</td>
                        <td>@x.Coords.Heading</td>
                        <td>@x.Coords.Speed</td>
                        <td>@distancevsstationlist[positioHistory.IndexOf(x)]</td>   
                        <td>@distancevsganglist[positioHistory.IndexOf(x)]</td>
                        <td>@distancevswhlist[positioHistory.IndexOf(x)]</td>
                        
                    </tr>
                }
            </tbody>
        </table>
        <br />
    @if (distancestation != null)
    {
        <p>Afstand vs StationSintNiklaas : @distancestation km</p>       
    }
    @if (distancegang != null)
    {
        <p>Afstand vs de Gang in dit gebouw verderop:  @distancegang km</p>       
    }
    @if (distancewhitehouse != null)
    {
        <p>Afstand vs Witte Huis : @distancewhitehouse km</p>     
    }
}
<button class="btn btn-primary" @onclick="KillEvents">Dispose Events + Timer -- BELANGRIJK -- klik mij maar 1 keer</button>
@code {


    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    private double stationlon = 4.144092;
    private double stationlat = 51.171666;
    private double ganglon = 4.140948;
    private double ganglat = 51.170052;
    private double whitehouselon = -77.036533;
    private double whitehouselat = 38.897668;
    private double distancestation;
    private double distancegang;
    private double distancewhitehouse;
    private List<double> distancevsstationlist = new List<double>();
    private List<double> distancevsganglist = new List<double>();
    private List<double> distancevswhlist = new List<double>();
    private List<GeolocationPosition> positioHistory = new List<GeolocationPosition>();
    private double distance;
    private static System.Timers.Timer thisTimer;
    private int counter = 0;


    public static double Radians(double x)
    {
        double PIx = 3.141592653589793;
        return x * PIx / 180;
    }
    public static double DistanceBetweenPlaces(double lon1, double lat1, double lon2, double lat2)
    {
        double RADIUS = 6378.16;
        double dlon = Radians(lon2 - lon1);
        double dlat = Radians(lat2 - lat1);
        double a = (Math.Sin(dlat / 2) * Math.Sin(dlat / 2)) + Math.Cos(Radians(lat1)) * Math.Cos(Radians(lat2)) * (Math.Sin(dlon / 2) * Math.Sin(dlon / 2));
        double angle = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return angle * RADIUS;
    }

    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
         StartTimer();
    }
    public async Task GetGeolocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)

        })).Location;
       await Task.Delay(2000);
    }

    public async Task StartTimer()
    {
        await GetGeolocation();   
        
        thisTimer = new System.Timers.Timer(1000);
        thisTimer.Elapsed += CountDownTimer;
        thisTimer.Enabled = true;
        WatchPosition();
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter % 5 == 0 || counter < 5)
        {
             GetDistanceVsStation();
            GetDistanceVsGang();
            GetDistanceVsWH();       
            counter += 1;
            GetGeolocation();  
            WatchPosition();
        }
        else
        {
            GetDistanceVsStation();
            GetDistanceVsGang();
            GetDistanceVsWH();           
        }
        InvokeAsync(StateHasChanged);
    }

    public void GetDistanceVsStation()
    {
        distancestation = DistanceBetweenPlaces(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, stationlon, stationlat);

    }
    public void GetDistanceVsGang()
    {
        distancegang = DistanceBetweenPlaces(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, ganglon, ganglat);
    }
    public void GetDistanceVsWH()
    {
        distancewhitehouse = DistanceBetweenPlaces(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, whitehouselon, whitehouselat);
    } 

    private IAsyncDisposable geopositionWatcher;

    public async Task WatchPosition(){
        geopositionWatcher = await geolocationWrapper.WatchPosition(async (p) =>
        {
            if (positioHistory.Count == 0)
            {
                positioHistory.Add(p.Location);
                distancevsstationlist.Add(distancestation);
                distancevsganglist.Add(distancegang);
                distancevswhlist.Add(distancewhitehouse);
                StateHasChanged();
            }
            else if (p.Location.Coords.Longitude != positioHistory.Last().Coords.Longitude && p.Location.Coords.Latitude != positioHistory.Last().Coords.Latitude)
            {
                positioHistory.Add(p.Location);
                distancevsstationlist.Add(distancestation);
                distancevsganglist.Add(distancegang);
                distancevswhlist.Add(distancewhitehouse);
                StateHasChanged();
            }
        }
        );
    }
    public async Task KillEvents(){
        await geopositionWatcher.DisposeAsync();
        geopositionWatcher = null;
        thisTimer.Dispose();
    }

    public async ValueTask DisposeAsync(){
        await KillEvents();
    }



 }
