
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.Logging
@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.JSInterop
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation  
@using AirWaze.Entities

@inject ILogger<Canvasformap> Logger
@inject IJSRuntime jsRuntime

<head>
   
    <style>        
        body
        {
        margin-top: 20px;
        margin-bottom: 60px;
        height: none;
        width: none;
        background-image: url('../Images/gps.jpg');
        background-size: cover;
        }       
        .blog_right_sidebar {
             background-color: #516eb1;
             background-size: contain; 
             padding: 20px;
             }
    </style>
</head>
<div style="padding-top:200px;"></div>

<h1>Click area for more info!</h1>
                                      
                 
             <section class="blog_area section-padding">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 mb-5 mb-lg-0">
                        <div class="blog_left_sidebar">
            
                    <div @onmousedown="ReportPointerLocation">
                        <BECanvas Width="600" Height="800" @ref="_canvasReference" >   
                        </BECanvas>
                    </div>
                </div>
                </div>
               <div class="col-lg-4">
                   <div>
                                         <a href="/" @onclick="KillEvents"><i class='fas fa-home' style='font-size:84px;color:red'></i></a>
                                        </div>
                        <div class="blog_right_sidebar">
                             
                             @switch (@selectedService)
                                {
                                    case 1:  
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">Gates 3 & 4</h3>
                                         <p>Gates number 3 & 4 are located here</p>
                                         <p>Luxury Seating Acomodation and Shop Delivery available on site</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          <p>@distancegates34.ToString("0,00") m distance from your current position, bearing @bearinggates34.ToString("0,00"). Walking Time : approx. @GetWalkingTime(@distancegates34) minutes.</p>
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>
                                                   
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/gates.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                        
                                     break;                                   
                                    case 2:
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">Gates 1 & 2</h3>
                                         <p>Gates number 1 & 2 are located here</p>
                                         <p>Luxury Seating Acomodation and Shop Delivery available on site</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          <p>@distancegates12.ToString("0,00") m distance from your current position, bearing @bearinggates12.ToString("0,00"). Walking Time : approx. @GetWalkingTime(@distancegates12) minutes.</p>
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>
                                                   
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/gates.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                        break;
                                    case 3:
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">Gates 5 & 6</h3>
                                         <p>Gates number 5 & 6 are located here</p>
                                         <p>Luxury Seating Acomodation and Shop Delivery available on site</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          <p>@distancegates56.ToString("0,00") m distance from your current position, bearing @bearinggates56.ToString("0,00"). Walking Time : approx. @GetWalkingTime(@distancegates56) minutes.</p>
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>
                                                   
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/gates.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                        break;
                                    case 4:
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">Gates ?????</h3>
                                         <p>AKA Kruispunt NoordLaan-Herderstraat</p>
                                         <p>Luxury Seating Acomodation and Shop Delivery available on site</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          @*<p>@distanceherderstraat.ToString("0,00") m distance from your current position, bearing @bearingherderstraat.ToString("0,00"). Walking Time : approx. @GetWalkingTime(@distanceherderstraat) minutes.</p>*@
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>
                                                   
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/gates.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                        break;
                                    case 5:
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">Gates 7, 8 & 9</h3>
                                         <p>Gates number 7, 8 & 9 are located here</p>
                                         <p>Luxury Seating Acomodation and Shop Delivery available on site</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          <p>@distancegates789.ToString("0,00") m distance from your current position, bearing @bearinggates789.ToString("0,00"). Walking Time : approx. @GetWalkingTime(@distancegates789) minutes.</p>
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>
                                                   
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/gates.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                        break;
                                    case 6:
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">BurgerKing</h3>
                                         <p>AKA Kruispunt regentieStraat</p>
                                         <p>Eat in/ take out / delivery at gates</p>
                                         <p>Whoppers - SoftDrinks - Ice</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          <p>@distanceregentiestraat.ToString("0,00") m distance from your current position, bearing @bearingregentiestraat.ToString("0,00"). Walking Time : approx. @GetWalkingTime(distanceregentiestraat) minutes.</p>
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>                                                 
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/burgerking.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                         break;                                       
                                    case 7:
                                        <div style="padding-top:20px;">
                                         <h3 class="widget_title">TaxFreeShop</h3>
                                         <p> AKA Basisschool OLVP ST Niklaas</p>
                                         <p>Perfume - Tobacco - Alcohol</p>
                                         <br />
                                          <h3>Gps Details:</h3>                                              
                                          <p>@distancebasisschool.ToString("0,00") m distance from your current position, bearing @bearingbasisschool.ToString("0,00"). Walking Time : approx. @GetWalkingTime(@distancebasisschool) minutes.</p>
                                        <br>
                                        <div class="media-body">
                                                <a href="blog_details.html">Insert Link </a>                                                 
                                            </div>
                                        <br>
                                        <div class="media post_item">                                
                                            <img src="Images/Dutyfree.jpg" alt="Sample Image" height="240" width="240"/>                                                                                       
                                        </div>   
                                        </div>
                                        break;
                                    default:
                                        break;
                                }            
                        </div>
                </div>
            </div>
        
        </div>
        
        </section>                                                                                       
@code {

    //Variabels

    private int selectedService = 0;
    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    private GeolocationPosition oldposition;
    private List<GeolocationResult> positioHistory = new List<GeolocationResult>();
    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;
    private string? mousePointerMessage;     
    private static System.Timers.Timer thisTimer;
    private int counter = 0;
    private double mybearing;
    private double targetbearing;

    //Airport Coordinates

    private double distancegates12;
    private double distancegates34;
    private double distancegates56;
    private double distancegates789;
    private double bearinggates12;
    private double bearinggates34;
    private double bearinggates56;
    private double bearinggates789;

    //specific doubles for sintNiklaas -- reference points for map
    
    private double herderstraatlon = 4.142743;
    private double herderstraatlat = 51.171666;
    private double regentiestraatlon = 4.142771;
    private double regentiestraatlat = 51.168555;
    private double basisschoollon = 4.135054;
    private double basisschoollat = 51.168353;
    private double distanceregentiestraat;
    private double distanceherderstraat;
    private double distancebasisschool;
    private double bearingherderstraat;
    private double bearingregentiestraat;
    private double bearingbasisschool;

    //constantes voor veld : 0.00001239875 vr Lat
    // 0.0000166383333333 vr Lon
    //veld : 51.177484 - 51; 51.167565
    // 4.143673 - 4.133690

    //specific doubles for Wondelgem  //VS ALDI-fietkot-PITTA

    //private double aldilon = 3.717714;
    //private double aldilat = 51.084001;
    //private double pittalon = 3.716733;
    //private double pittalat = 51.080390;
    //private double frietkotlon = 3.711019;
    //private double frietkotlat =  51.083220;
    //private double distancealdi;
    //private double distancepitta;
    //private double distancefrietkot;
    //private double bearingpitta;
    //private double bearingfrietkot;
    //private double bearingaldi;


    //On start Component
    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
        await StartTimer();
    }

    // Actual Start/FiresTimer+AddsEvent
    public async Task StartTimer()
    {

        await GetGeolocation();
        thisTimer = new System.Timers.Timer(1000);
        thisTimer.Elapsed += CountDownTimer;
        thisTimer.Enabled = true;
    }

    //On Tick-Event
    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter % 5 == 0 && counter > 5)
        {
            //FOR MOBILE DEPLOYMENT, GET TRUE BEARING WITHOUT DEVICE GYROSCOPE AKA FREE
            if (oldposition == null && currentPosition != null)
            {
                oldposition = currentPosition;
            }
            if (oldposition.Coords != currentPosition.Coords)
            {
                mybearing = DegreeBearing(oldposition.Coords.Longitude, oldposition.Coords.Latitude, currentPosition.Coords.Longitude, currentPosition.Coords.Latitude);
                oldposition = currentPosition;
            }
            GetGeolocation();            

        } 
        counter++;

        InvokeAsync(StateHasChanged);
    }

    //Calls GPS position and compares to grid and imgmap + paints
    public async Task GetGeolocation()
    {
        int x;
        int y;
        //GPS
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        })).Location;
        this._context = await this._canvasReference.CreateCanvas2DAsync(); 
        //AFBAKENEN VELD
        if (currentPosition.Coords.Latitude < 51.177484 && currentPosition.Coords.Latitude > 51.167565 && currentPosition.Coords.Longitude < 4.143673 && currentPosition.Coords.Longitude > 4.133690)
        {
            //Paint coords
            x = (int)Math.Round(((51.177484 - currentPosition.Coords.Latitude / 800) / 0.00001239875)/10000);
            y =  (int)Math.Round(((4.143673 - currentPosition.Coords.Longitude / 600) / 0.000016638333)/1000);
            //Paint
            await this._context.SetFillStyleAsync("black");      
            await this._context.FillRectAsync(x, y, 20, 20);
            await this._context.SetFillStyleAsync("red");           
            if (mybearing != null)
            {
                switch (mybearing)
                {
                    case < 22.5 :                        
                        await this._context.FillRectAsync((x+5), (y-10), 10, 10);             
                        break;
                    case < 67.5 :                        
                        await this._context.FillRectAsync((x+20), (y-10), 10, 10);             
                        break;
                    case < 112.5 :                        
                        await this._context.FillRectAsync((x+20), (y+5), 10, 10);             
                        break;
                    case < 157.5 :                        
                        await this._context.FillRectAsync((x+20), (y+20), 10, 10);             
                        break;
                    case < 202.5 :                        
                        await this._context.FillRectAsync((x+5), (y+20), 10, 10);             
                        break;
                    case < 247.5 :                        
                        await this._context.FillRectAsync((x-10), (y+20), 10, 10);             
                        break;
                    case < 292.5 :                        
                        await this._context.FillRectAsync((x-10), (y+5), 10, 10);             
                        break;
                    case < 337.5 :                        
                        await this._context.FillRectAsync((x-10), (y-10), 10, 10);             
                        break;
                    case <= 360:
                        await this._context.FillRectAsync((x+5), (y-10), 10, 10);
                        break;
                }
            }                                
            await this._context.SetFontAsync("46px Calibri");
            await this._context.StrokeTextAsync("You are Here!", x, y);
        }

        //WONDELGEM

        //if (currentPosition.Coords.Latitude < 51.084944 && currentPosition.Coords.Latitude > 51.0802263 && currentPosition.Coords.Longitude < 3.719737 && currentPosition.Coords.Longitude > 3.709195)
        //{
        //    x = (int)Math.Round(((51.084944 - currentPosition.Coords.Latitude / 800) /  0.0001757)/1000);
        //    y =  (int)Math.Round(((3.719737 - currentPosition.Coords.Longitude / 600) / 0.000005897125)/1000);
        
        //    await this._context.SetFillStyleAsync("black");      
        //    await this._context.FillRectAsync(x, y, 20, 20);
        //    await this._context.SetFontAsync("46px Calibri");
        //    await this._context.StrokeTextAsync("Hier ben Ik", x, y);
        //}


    }

    //Gets Mouse Location on Imgmap
    private async Task ReportPointerLocation(MouseEventArgs e)
    {
        mousePointerMessage = $"Mouse coordinates: {e.OffsetX}:{e.OffsetY}";
        //Compares mouse coords to canvas
        if (330 < e.OffsetX && 360 > e.OffsetX && 54 < e.OffsetY && 90 > e.OffsetY)
        {
            selectedService = 1;
        }
        else if (547 < e.OffsetX && 578 > e.OffsetX && 49 < e.OffsetY && 90 > e.OffsetY)
        {
            selectedService = 2;
        }
        else if (321 < e.OffsetX && 351 > e.OffsetX && 262 < e.OffsetY && 305 > e.OffsetY)
        {
            selectedService = 3;
        }
        else if (550 < e.OffsetX && 582 > e.OffsetX && 263 < e.OffsetY && 306 > e.OffsetY)
        {
            selectedService = 4;
        }
        else if (322 < e.OffsetX && 350 > e.OffsetX && 474 < e.OffsetY && 518 > e.OffsetY)
        {
            selectedService = 5;
        }
        else if (482 < e.OffsetX && 538 > e.OffsetX && 590 < e.OffsetY && 649 > e.OffsetY)
        {
            selectedService = 6;
        }
        else if (106 < e.OffsetX && 150 > e.OffsetX && 720 < e.OffsetY && 748 > e.OffsetY)
        {
            selectedService = 7;
        }
        else
        {
            selectedService = 0;
        }
        //Update Canvas
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        //Call GPS for Updates
        await GetGeolocation();

        //WOndelgem

        //distancealdi =  GetDistance(aldilon, aldilat);
        //distancefrietkot =  GetDistance( frietkotlon, frietkotlat);
        //distancepitta =  GetDistance(pittalon, pittalat);
        //bearingaldi = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, aldilat, aldilon);
        //bearingpitta = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, pittalat, pittalon);
        //bearingfrietkot = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, frietkotlat, frietkotlon);

        //Gates in "st Niklaas" from List in entities
        distancegates12 = GetDistance(AirWaze.Entities.Airport.Gates[0].CoordsLon, AirWaze.Entities.Airport.Gates[0].CoordsLat);
        distancegates34 = GetDistance(AirWaze.Entities.Airport.Gates[2].CoordsLon, AirWaze.Entities.Airport.Gates[2].CoordsLat);
        distancegates56 = GetDistance(AirWaze.Entities.Airport.Gates[4].CoordsLon, AirWaze.Entities.Airport.Gates[4].CoordsLat);
        distancegates789 = GetDistance(AirWaze.Entities.Airport.Gates[6].CoordsLon, AirWaze.Entities.Airport.Gates[6].CoordsLat);
        bearinggates12 = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, AirWaze.Entities.Airport.Gates[0].CoordsLat, AirWaze.Entities.Airport.Gates[0].CoordsLon);
        bearinggates34 = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, AirWaze.Entities.Airport.Gates[2].CoordsLat, AirWaze.Entities.Airport.Gates[2].CoordsLon);
        bearinggates56 = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, AirWaze.Entities.Airport.Gates[4].CoordsLat, AirWaze.Entities.Airport.Gates[4].CoordsLon);
        bearinggates789 = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, AirWaze.Entities.Airport.Gates[6].CoordsLat, AirWaze.Entities.Airport.Gates[6].CoordsLon);

        // 3 points in SintNiklaas
        distanceregentiestraat =  GetDistance(regentiestraatlon, regentiestraatlat);
        distanceherderstraat =  GetDistance( herderstraatlon, herderstraatlat);
        distancebasisschool =  GetDistance(basisschoollon, basisschoollat);
        bearingherderstraat = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, herderstraatlat, herderstraatlon);
        bearingregentiestraat = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, regentiestraatlat, regentiestraatlon);
        bearingbasisschool = DegreeBearing(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude, basisschoollat, basisschoollon);
    }

    //Await Call for rendering
    protected async Task OnRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();        
    }

    //Degrees
    public static double Radians(double x)
    {
        double PIx = 3.141592653589793;
        return x * PIx / 180;
    }

    //Calcs Distance
    public double GetDistance(double x, double y)
    {
        return GetDistance(currentPosition.Coords.Longitude, currentPosition.Coords.Latitude, x, y);

    }

    //Kills Componentevents -- IMPORTANT
    public async Task KillEvents()
    {

        if (thisTimer != null)
        {
            thisTimer.Dispose();
        }        
    }

    //dDegrees to Absolute bearing
    static double DegreeBearing(double lat1, double lon1, double lat2, double lon2)
    {   
        var dLon = ToRad(lon2-lon1);
        var dPhi = Math.Log(
            Math.Tan(ToRad(lat2)/2+Math.PI/4)/Math.Tan(ToRad(lat1)/2+Math.PI/4));
        if (Math.Abs(dLon) > Math.PI)
        {
            dLon = dLon > 0 ? -(2*Math.PI-dLon) : (2*Math.PI+dLon);
        }
        double x = ToBearing(Math.Atan2(dLon, dPhi));
        return x;
    }

    //To Radians
    public static double ToRad(double degrees)
    {
        return degrees * (Math.PI / 180);
    }

    //TO degrees
    public static double ToDegrees(double radians)
    {
        return radians * 180 / Math.PI;
    }

    //Bearing to relative Bearing 
    public static double ToBearing(double radians) 
    {        
        return (ToDegrees(radians) +360) % 360;
    }

    //Distance between 2 points long/lat
    public double GetDistance(double longitude, double latitude, double otherLongitude, double otherLatitude)
    {
        var d1 = latitude * (Math.PI / 180.0);
        var num1 = longitude * (Math.PI / 180.0);
        var d2 = otherLatitude * (Math.PI / 180.0);
        var num2 = otherLongitude * (Math.PI / 180.0) - num1;
        var d3 = Math.Pow(Math.Sin((d2 - d1) / 2.0), 2.0) + Math.Cos(d1) * Math.Cos(d2) * Math.Pow(Math.Sin(num2 / 2.0), 2.0);

        return 6376500.0 * (2.0 * Math.Atan2(Math.Sqrt(d3), Math.Sqrt(1.0 - d3)));
    }

    //Distance To Walking time
    public int GetWalkingTime(double distance)
    {
        return (int)Math.Round(distance / 80);
    }

    //For Future Projects @Mousedown > @OnCLick => EventArgs!!!!

       
 }
