
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.Logging
@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.JSInterop
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation   
@inject ILogger<Canvasformap> Logger
@inject IJSRuntime jsRuntime

<div class="haraldcontainer">
    <div @onmousedown="ReportPointerLocation">
<BECanvas Width="600" Height="800" @ref="_canvasReference" >
    
</BECanvas>
</div>
</div>

@if (selectedService != 0)
{
    @switch (@selectedService)
{
    case 1:
    <alert>Gate 1- 4 Selected</alert>
        break;
    case 2:
    <p>Gate 5- 8 Selected</p>
        break;
    case 3:
    <p>Gate 9- 12 Selected</p>
        break;
    case 4:
    <p>Gate 13- 16 Selected</p>
        break;
    case 5:
    <p>Gate 16- 20 Selected</p>
        break;
    case 6:
    <p>BurgerKing Selected</p>
        break;
    case 7:
        <p>DutyFreeShop Selected</p>
        break;
    default:
        break;

}
}

<p>@mousePointerMessage</p>



 <button class="btn btn-primary" @onclick="GetGeolocation">Get Current Position</button>

@if(currentPosition != null){
   <div>
<p>Current position : </p>
        <ul>
           
Latitude : @currentPosition.Coords.Latitude
            <li>Longitude : @currentPosition.Coords.Longitude </li>
            <li>Altitude : @currentPosition.Coords.Altitude </li>
            <li>Accuracy : @currentPosition.Coords.Accuracy </li>
            <li>Altitude Accuracy : @currentPosition.Coords.AltitudeAccuracy </li>
            <li>Heading : @currentPosition.Coords.Heading </li>
            <li>Speed : @currentPosition.Coords.Speed </li>
        </ul>
    </div>
}

@code {
    private int selectedService = 0;

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    private List<GeolocationResult> positioHistory = new List<GeolocationResult>();


    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
    }


    public async Task GetGeolocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        })).Location;
    }

    private string? mousePointerMessage;

    private async Task ReportPointerLocation(MouseEventArgs e)
    {
        mousePointerMessage = $"Mouse coordinates: {e.OffsetX}:{e.OffsetY}";
        if (330 < e.OffsetX && 360 > e.OffsetX && 54 < e.OffsetY && 90 > e.OffsetY)
        {
            selectedService = 1;
        }
        else if (547 < e.OffsetX && 578 > e.OffsetX && 49 < e.OffsetY && 90 > e.OffsetY)
        {
            selectedService = 2;
        }
        else if (321 < e.OffsetX && 351 > e.OffsetX && 262 < e.OffsetY && 305 > e.OffsetY)
        {
            selectedService = 3;
        }
        else if (550 < e.OffsetX && 582 > e.OffsetX && 263 < e.OffsetY && 306 > e.OffsetY)
        {
            selectedService = 4;
        }
        else if (322 < e.OffsetX && 350 > e.OffsetX && 474 < e.OffsetY && 518 > e.OffsetY)
        {
            selectedService = 5;
        }
        else if (482 < e.OffsetX && 538 > e.OffsetX && 590 < e.OffsetY && 649 > e.OffsetY)
        {
            selectedService = 6;
        }
        else if (106 < e.OffsetX && 150 > e.OffsetX && 720 < e.OffsetY && 748 > e.OffsetY)
        {
            selectedService = 7;
        }
        else
        {
            selectedService = 0;
        }
        this._context = await this._canvasReference.CreateCanvas2DAsync(); 
        

        //await this._context.SetFillStyleAsync("black");      
        //await this._context.FillRectAsync(e.OffsetX, e.OffsetY, 20, 20);
        //await this._context.SetFontAsync("38px Calibri");
        //await this._context.StrokeTextAsync("Hier ben Ik Als Ik klik", e.OffsetX, e.OffsetY);

    }
    private async Task ReportPointerLocationOnMap(MouseEventArgs e)
    {
        mousePointerMessage = $"Mouse coordinates: {e.OffsetX}:{e.OffsetY}";        
    }

        
    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;


    protected async Task OnRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();        
    }
       
 }
